{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m2U0Gbk9k2Wk","executionInfo":{"status":"ok","timestamp":1732928679607,"user_tz":300,"elapsed":18444,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"}},"outputId":"cf22ef28-5871-4c92-fa52-6868d45ccdc9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/.shortcut-targets-by-id/164pwugNcy1cMIsbZVQzd7ydMhuPSOnnT/CS682_Project\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","%cd /content/drive/MyDrive/CS682_Project/"]},{"cell_type":"markdown","metadata":{"id":"tbIgHqwLrsTg"},"source":["# Imports and Downloads"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QBxV_8eDvsn3"},"outputs":[],"source":["import subprocess\n","import kagglehub\n","import pandas as pd\n","from collections import defaultdict, Counter\n","import os\n","import subprocess\n","from tqdm.auto import tqdm"]},{"cell_type":"markdown","metadata":{"id":"FKuyiB8X0ORY"},"source":["\n","# Text Augmentation: Backpropogation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ODiLBjFbRaVV"},"outputs":[],"source":["import random\n","from typing import List, Tuple, Any\n","from collections import defaultdict\n","from tqdm.auto import tqdm\n","\n","class DatasetUpsampler:\n","    def __init__(self):\n","        pass\n","\n","    def _upsample_sentence(self, string: str, num_target_sentences: int, verbose: int = 0) -> List[str]:\n","        \"\"\"\n","        Generate an upsampled list of a given sentence.\n","\n","        Args:\n","            string (str): The input sentence to be upsampled.\n","            num_target_sentences (int): Target number of sentences to generate.\n","\n","        Returns:\n","            List[str]: A list containing the upsampled sentences.\n","        \"\"\"\n","        pass  # Define the sentence upsampling logic here\n","\n","    def _upsample_class(self, string_arr: List[str], num_target_sentences: int, verbose: int = 0) -> List[str]:\n","        \"\"\"\n","        Upsample a list of sentences to reach a target number of sentences for a specific class.\n","\n","        Args:\n","            string_arr (List[str]): The list of sentences belonging to a class.\n","            num_target_sentences (int): Target number of sentences for the class.\n","\n","        Returns:\n","            List[str]: A list containing upsampled sentences for the class.\n","        \"\"\"\n","        if num_target_sentences <= len(string_arr):\n","            return string_arr\n","        else:\n","            # Calculate how many sentences are needed per original sentence in string_arr\n","            sentences_per_string = num_target_sentences // len(string_arr)\n","            remaining_sentences = num_target_sentences % len(string_arr)\n","\n","            # Upsample each sentence and aggregate results\n","            upsampled_sentences = []\n","            for i, string in (enumerate(string_arr) if verbose == 0 else tqdm(enumerate(string_arr))):\n","                # Upsample with an extra sentence if needed to reach exact count\n","                target_count = sentences_per_string + (1 if i < remaining_sentences else 0)\n","                upsampled_sentences.extend(self._upsample_sentence(string, target_count, verbose))\n","\n","            # assert len(upsampled_sentences) == num_target_sentences\n","\n","            return upsampled_sentences\n","\n","    def upsample_dataset(self, X: List[str], y: List[str], min_sentences_per_class: int, verbose: int = 0) -> Tuple[List[str], List[str]]:\n","        \"\"\"\n","        Upsample a dataset to ensure each class has a minimum number of sentences.\n","\n","        Args:\n","            X (List[str]): The list of data items.\n","            y (List[str]): The list of labels corresponding to each data item in X.\n","            min_sentences_per_class (int): Minimum number of sentences per class after upsampling.\n","            verbose (int): Verbosity level (0: none) (1: full)\n","\n","        Returns:\n","            Tuple[List[str], List[str]]: Upsampled data (X) and corresponding labels (y).\n","        \"\"\"\n","        if len(X) != len(y):\n","            raise ValueError(\"X and y must have the same length.\")\n","        if min_sentences_per_class <= 0:\n","            raise ValueError(\"min_sentences_per_class must be a positive integer.\")\n","\n","        # Group X by labels in y\n","        X_by_y = defaultdict(list)\n","        for x_item, y_label in zip(X, y):\n","            X_by_y[y_label].append(x_item)\n","\n","        # Upsample each class to the minimum required sentences\n","        for y_label, X_arr in (X_by_y.items() if verbose == 0 else tqdm(X_by_y.items())):\n","            X_by_y[y_label] = self._upsample_class(X_arr, min_sentences_per_class, verbose)\n","\n","        # Combine upsampled data and labels\n","        X_upsampled = []\n","        y_upsampled = []\n","        for y_label, X_arr in X_by_y.items():\n","            X_upsampled.extend(X_arr)\n","            y_upsampled.extend([y_label] * len(X_arr))\n","\n","        # Randomize X_upsampled and y_upsampled\n","        combined = list(zip(X_upsampled, y_upsampled))\n","        random.shuffle(combined)\n","        X_upsampled, y_upsampled = zip(*combined)\n","\n","        return list(X_upsampled), list(y_upsampled)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cHji4jVdX7xt"},"outputs":[],"source":["import google.generativeai as genai\n","import time\n","from concurrent.futures import ThreadPoolExecutor, TimeoutError\n","\n","def augment_sentence_with_gemini(prompt, sentence, timeout=300):\n","    key = \"\"\n","    genai.configure(api_key=key)\n","\n","    # Create the model\n","    generation_config = {\n","        \"temperature\": 1,\n","        \"top_p\": 0.95,\n","        \"top_k\": 40,\n","        \"max_output_tokens\": 8192,\n","        \"response_mime_type\": \"text/plain\",\n","    }\n","\n","    model = genai.GenerativeModel(\n","        model_name=\"gemini-1.5-flash\",\n","        generation_config=generation_config,\n","    )\n","\n","    def make_request():\n","        try:\n","            chat_session = model.start_chat(\n","                history=[\n","                    {\n","                        \"role\": \"user\",\n","                        \"parts\": [\n","                            f\"{prompt} {sentence}\"\n","                        ],\n","                    },\n","                ]\n","            )\n","            response = chat_session.send_message(\"INSERT_INPUT_HERE\")\n","            return response.text\n","        except Exception as e:\n","            print(f\"Error: {e}\")\n","            raise e\n","\n","    while True:\n","        with ThreadPoolExecutor() as executor:\n","            future = executor.submit(make_request)\n","            try:\n","                return future.result(timeout=timeout)\n","            except TimeoutError:\n","                print(f\"Request timed out after {timeout} seconds. Retrying...\")\n","            except Exception as e:\n","                print(f\"Error occurred: {e}. Retrying in 120 seconds...\")\n","                time.sleep(120)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KsAH9dRqYFn5"},"outputs":[],"source":["test1 = augment_sentence_with_gemini(\"Rewrite the following job posting by making small changes:\", \"We currently need the following team members at GRAYLING NURSING AND REHABILITATION COMMUNITY in GRAYLING, MICHIGAN:\\nRegistered Nurse (RN) *1st Shift - $5,000 SIGN-ON BONUS\\n*3rd Shift - $10,000 SIGN-ON BONUS\\nAtrium Centers…Be a light…to all residents, their families and team members “Our mission is to serve as a bright light in the lives of our residents and families by delivering compassionate, quality care in the communities they call home”. Our foundation is based upon Compassion, Community and Clinical Excellence.\\nBENEFITS:100% Employee owned (ESOP) and offer 401(k) matching\\nMedical/Dental/Vision/Life Insurances\\nPaid Time Off/Holiday Pay\\nTuition Reimbursement – Further your career with our support!\\nAtrium Centers Discount Program – SAVE ON TRAVEL, ELECTRONICS, HEALTH AND WELLNESS, AUTOMOTIVE AND MORE\\nRESPONSIBILITES:\\nAssess, evaluate, and provide direct care/related services for residents in accordance with their care plan\\nAdminister medications and complete treatments based on residents' needs\\nSupervise and evaluate the performance of nursing assistants\\nQUALIFICATIONS:\\nA passion for caring for and improving the lives of our residents\\nCurrent RN License\\nAbility to Administer Medication and IV certification\\nGood Working knowledge of State Rules/Regulations\\nPositive Can-Do Attitude and Excellent Attendance\\nWe are Atrium Centers, and we invite you to see—first-hand—what we’re all about. If you’re committed to delivering compassionate, quality care in your local community, and believe in taking an all-hands, all-hearts approach to delivering top-notch care, apply with us today.\")\n","print(test1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fniSjxg_QHv_"},"outputs":[],"source":["\n","class LLMUpsampler(DatasetUpsampler):\n","  \"\"\"\n","  Upsample a dataset to ensure each class has a minimum number of sentences via backtranslation.\n","  \"\"\"\n","  def __init__(self, prompt):\n","    self.prompt = prompt\n","\n","\n","  def _augment_setence_with_gemini(self, sentence):\n","\n","    return augment_sentence_with_gemini(self.prompt,sentence)\n","\n","  def _upsample_sentence(self, sentence: str, num_target_sentences: int, verbose: int = 0) -> List[str]:\n","    new_sentences = set()\n","    new_sentences.add(sentence)\n","\n","    while len(new_sentences) < num_target_sentences:\n","      res = self._augment_setence_with_gemini(sentence)\n","      new_sentences.add(res)\n","\n","\n","    return list(new_sentences)\n"]},{"cell_type":"markdown","metadata":{"id":"1R6Y0Dzufbky"},"source":["Upsample Spotify Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"elapsed":934,"status":"ok","timestamp":1732928695194,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"Y5wla5mnRWrZ","outputId":"9fb75cd1-a848-4760-9f3d-32138eb13573"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0    3529\n","1    2683\n","2    1997\n","3    1935\n","4    1365\n","9     270\n","8     268\n","7     185\n","6     103\n","5      79\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3529</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2683</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1997</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1935</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1365</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>270</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>268</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>185</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>103</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>79</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":6}],"source":["train_df = pd.read_csv('spotify_10/spotify_10_train_unaugmented.csv')\n","X_train = train_df['text']\n","y_train = train_df['label']\n","y_train.value_counts()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["d7e03a6002254625a581fe37b0ed8da6","bc61966b70e44325ab65cbd3087daa9d"]},"executionInfo":{"elapsed":85959,"status":"error","timestamp":1732658602250,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"_b9zZAf-kD6T","outputId":"3c0bbd4f-bbd4-46c4-b403-91ad13daa8de"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d7e03a6002254625a581fe37b0ed8da6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/10 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"bc61966b70e44325ab65cbd3087daa9d","version_major":2,"version_minor":0},"text/plain":["0it [00:00, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Error: finish_reason: PROHIBITED_CONTENT\n","\n","Error: HTTPConnectionPool(host='localhost', port=46173): Read timed out. (read timeout=600.0)\n","Error: HTTPConnectionPool(host='localhost', port=46173): Read timed out. (read timeout=600.0)\n"]}],"source":["d = LLMUpsampler(\"Rewrite the following song lyrics by making small changes:\")\n","X_train_upsampled, y_train_upsampled = d.upsample_dataset(X_train, y_train, 1000, verbose=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":159},"executionInfo":{"elapsed":277,"status":"error","timestamp":1732928649290,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"PeARSqtPuGLw","outputId":"4a0e2c77-08c9-4d15-f3be-5559e19f7eee"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'pd' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-1c2cee07d201>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain_augmented_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'text'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mX_train_upsampled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'label'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_train_upsampled\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain_augmented_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'spotify_10/spotify_10_train_llm_augmented.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}],"source":["train_augmented_df = pd.DataFrame({'text': X_train_upsampled, 'label': y_train_upsampled})\n","train_augmented_df.to_csv('spotify_10/spotify_10_train_llm_augmented.csv', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"elapsed":189,"status":"ok","timestamp":1731706526875,"user":{"displayName":"Thomas Ji","userId":"10245120714271122346"},"user_tz":300},"id":"UWg42fV_wGuV","outputId":"57143932-98e7-4d99-b670-516d523810e0"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3529</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2683</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1997</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1935</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1365</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>992</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"],"text/plain":["label\n","0    3529\n","1    2683\n","2    1997\n","3    1935\n","4    1365\n","8    1000\n","6    1000\n","5    1000\n","9    1000\n","7     992\n","Name: count, dtype: int64"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["train_augmented_df['label'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"ef4aea6ofc4E"},"source":["Upsample Linkedin Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"elapsed":2209,"status":"ok","timestamp":1732928733288,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"1ihL3KAfffSk","outputId":"313ca1ac-8643-4dd7-a841-ae6147ca6721"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["title\n","developer           2432\n","nurse               2389\n","sales               2371\n","accountant          1421\n","project manager     1372\n","therapist           1223\n","human resources     1152\n","customer service     823\n","teacher              576\n","attorney             441\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>title</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>developer</th>\n","      <td>2432</td>\n","    </tr>\n","    <tr>\n","      <th>nurse</th>\n","      <td>2389</td>\n","    </tr>\n","    <tr>\n","      <th>sales</th>\n","      <td>2371</td>\n","    </tr>\n","    <tr>\n","      <th>accountant</th>\n","      <td>1421</td>\n","    </tr>\n","    <tr>\n","      <th>project manager</th>\n","      <td>1372</td>\n","    </tr>\n","    <tr>\n","      <th>therapist</th>\n","      <td>1223</td>\n","    </tr>\n","    <tr>\n","      <th>human resources</th>\n","      <td>1152</td>\n","    </tr>\n","    <tr>\n","      <th>customer service</th>\n","      <td>823</td>\n","    </tr>\n","    <tr>\n","      <th>teacher</th>\n","      <td>576</td>\n","    </tr>\n","    <tr>\n","      <th>attorney</th>\n","      <td>441</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}],"source":["train_df = pd.read_csv('LinkedInDataset/linkedin_train.csv')\n","X_train = train_df['description']\n","y_train = train_df['title']\n","train_df['title'].value_counts()\n","# d = LLMUpsampler(\"Rewrite the following job posting by making small changes:\")\n","# X_train_upsampled, y_train_upsampled = d.upsample_dataset(X_train, y_train, 1000, verbose=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tV3y0U9Uf2sL"},"outputs":[],"source":["train_augmented_df = pd.DataFrame({'description': X_train_upsampled, 'title': y_train_upsampled})\n","train_augmented_df.to_csv('LinkedInDataset/linkedin_train_llm_augmented.csv', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"elapsed":196,"status":"ok","timestamp":1732492921678,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"V5t45z1tgcWY","outputId":"073154b7-8e83-4d6c-ffa6-56a5b4100362"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>title</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>developer</th>\n","      <td>2432</td>\n","    </tr>\n","    <tr>\n","      <th>nurse</th>\n","      <td>2389</td>\n","    </tr>\n","    <tr>\n","      <th>sales</th>\n","      <td>2371</td>\n","    </tr>\n","    <tr>\n","      <th>accountant</th>\n","      <td>1421</td>\n","    </tr>\n","    <tr>\n","      <th>project manager</th>\n","      <td>1372</td>\n","    </tr>\n","    <tr>\n","      <th>therapist</th>\n","      <td>1223</td>\n","    </tr>\n","    <tr>\n","      <th>human resources</th>\n","      <td>1152</td>\n","    </tr>\n","    <tr>\n","      <th>teacher</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>attorney</th>\n","      <td>1000</td>\n","    </tr>\n","    <tr>\n","      <th>customer service</th>\n","      <td>1000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"],"text/plain":["title\n","developer           2432\n","nurse               2389\n","sales               2371\n","accountant          1421\n","project manager     1372\n","therapist           1223\n","human resources     1152\n","teacher             1000\n","attorney            1000\n","customer service    1000\n","Name: count, dtype: int64"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["train_augmented_df['title'].value_counts()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"elapsed":177,"status":"ok","timestamp":1732492925483,"user":{"displayName":"Kevin Oliveira Downing","userId":"16689283369079714337"},"user_tz":300},"id":"CuJIQT5QT62i","outputId":"7273a670-735e-42e0-9b5d-5b3e9e091631"},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>title</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>developer</th>\n","      <td>2432</td>\n","    </tr>\n","    <tr>\n","      <th>nurse</th>\n","      <td>2389</td>\n","    </tr>\n","    <tr>\n","      <th>sales</th>\n","      <td>2371</td>\n","    </tr>\n","    <tr>\n","      <th>accountant</th>\n","      <td>1421</td>\n","    </tr>\n","    <tr>\n","      <th>project manager</th>\n","      <td>1372</td>\n","    </tr>\n","    <tr>\n","      <th>therapist</th>\n","      <td>1223</td>\n","    </tr>\n","    <tr>\n","      <th>human resources</th>\n","      <td>1152</td>\n","    </tr>\n","    <tr>\n","      <th>customer service</th>\n","      <td>823</td>\n","    </tr>\n","    <tr>\n","      <th>teacher</th>\n","      <td>576</td>\n","    </tr>\n","    <tr>\n","      <th>attorney</th>\n","      <td>441</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"],"text/plain":["title\n","developer           2432\n","nurse               2389\n","sales               2371\n","accountant          1421\n","project manager     1372\n","therapist           1223\n","human resources     1152\n","customer service     823\n","teacher              576\n","attorney             441\n","Name: count, dtype: int64"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["y_train.value_counts()"]}],"metadata":{"colab":{"toc_visible":true,"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}